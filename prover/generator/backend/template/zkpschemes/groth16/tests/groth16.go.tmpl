import (
	{{ template "import_fr" . }}
	{{ template "import_curve" . }}
	{{ template "import_backend_cs" . }}
	{{ template "import_witness" . }}
	{{ template "import_groth16" . }}
	"bytes"
	"testing"
	"github.com/fxamacker/cbor/v2"

	"github.com/consensys/gnark/internal/backend/circuits"
	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark-crypto/ecc"
)


func TestCircuits(t *testing.T) {
	for name, circuit := range circuits.Circuits {
		t.Run(name, func(t *testing.T) {
			assert := groth16.NewAssert(t)
			r1cs, err := frontend.Compile(curve.ID, backend.GROTH16, circuit.Circuit)
			assert.NoError(err)
			assert.ProverFailed(r1cs, circuit.Bad)
			assert.ProverSucceeded(r1cs, circuit.Good)
		})
	}
}

//--------------------//
//     benches		  //
//--------------------//

type refCircuit struct {
	nbConstraints int 
	X frontend.Variable
	Y frontend.Variable  `gnark:",public"`
}

func (circuit *refCircuit) Define(curveID ecc.ID, cs *frontend.ConstraintSystem) error {
	for i := 0; i < circuit.nbConstraints; i++ {
		circuit.X = cs.Mul(circuit.X, circuit.X)
	}
	cs.AssertIsEqual(circuit.X, circuit.Y)
	return nil 
}

func referenceCircuit() (frontend.CompiledConstraintSystem, frontend.Circuit) {
	const nbConstraints = 40000
	circuit := refCircuit{
		nbConstraints: nbConstraints,
	}
	r1cs, err := frontend.Compile(curve.ID, backend.GROTH16, &circuit)
	if err != nil {
		panic(err)
	}
	
	var good refCircuit
	good.X.Assign(2)

	// compute expected Y
	var expectedY fr.Element
	expectedY.SetUint64(2)

	for i := 0; i < nbConstraints; i++ {
		expectedY.Mul(&expectedY, &expectedY)
	}

	good.Y.Assign(expectedY)

	return r1cs, &good
}

func TestReferenceCircuit(t *testing.T) {
	if testing.Short() {
		t.SkipNow()
	}
	assert := groth16.NewAssert(t)
	r1cs, witness := referenceCircuit()
	assert.ProverSucceeded(r1cs, witness)
}

func BenchmarkSetup(b *testing.B) {
	r1cs, _ := referenceCircuit()
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	var vk {{toLower .CurveID}}groth16.VerifyingKey
	b.ResetTimer()

	b.Run("setup", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			{{toLower .CurveID}}groth16.Setup(r1cs.(*cs.R1CS), &pk, &vk)
		}
	})
}

func BenchmarkProver(b *testing.B) {
	r1cs, _solution := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	err := fullWitness.FromFullAssignment(_solution)
	if err != nil {
		b.Fatal(err)
	}
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	{{toLower .CurveID}}groth16.DummySetup(r1cs.(*cs.R1CS), &pk)

	b.ResetTimer()
	b.Run("prover", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_, _ = {{toLower .CurveID}}groth16.Prove(r1cs.(*cs.R1CS), &pk, fullWitness, backend.ProverOption{})
		}
	})
}

func BenchmarkVerifier(b *testing.B) {
	r1cs, _solution := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	err := fullWitness.FromFullAssignment(_solution)
	if err != nil {
		b.Fatal(err)
	}
	publicWitness := {{toLower .CurveID}}witness.Witness{}
	err = publicWitness.FromPublicAssignment(_solution)
	if err != nil {
		b.Fatal(err)
	}
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	var vk {{toLower .CurveID}}groth16.VerifyingKey
	{{toLower .CurveID}}groth16.Setup(r1cs.(*cs.R1CS), &pk, &vk)
	proof, err := {{toLower .CurveID}}groth16.Prove(r1cs.(*cs.R1CS), &pk, fullWitness,backend.ProverOption{})
	if err != nil {
		panic(err)
	}

	b.ResetTimer()
	b.Run("verifier", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_ = {{toLower .CurveID}}groth16.Verify(proof, &vk, publicWitness)
		}
	})
}



func BenchmarkSerialization(b *testing.B) {
	r1cs, _solution := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	err := fullWitness.FromFullAssignment(_solution)
	if err != nil {
		b.Fatal(err)
	}
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	var vk {{toLower .CurveID}}groth16.VerifyingKey
	{{toLower .CurveID}}groth16.Setup(r1cs.(*cs.R1CS), &pk, &vk)
	proof, err := {{toLower .CurveID}}groth16.Prove(r1cs.(*cs.R1CS), &pk, fullWitness,backend.ProverOption{})
	if err != nil {
		panic(err)
	}

	b.ReportAllocs()

	{{ $base := toLower .CurveID }}
	
	{{ template "benchBinarySerialization" dict "Type" (print $base "groth16.ProvingKey") "Name" "pk" }}
	{{ template "benchBinarySerialization" dict "Type" (print $base "groth16.Proof") "Name" "proof" }}


}

{{ define "benchBinarySerialization" }}
	// ---------------------------------------------------------------------------------------------
	// {{$.Type}} binary serialization
	b.Run("{{$.Name}}: binary serialization ({{$.Type}})", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			var buf bytes.Buffer
			_, _ = {{- $.Name}}.WriteTo(&buf)
		}
	})
	b.Run("{{$.Name}}: binary deserialization ({{$.Type}})", func(b *testing.B) {
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteTo(&buf)
		var {{ $.Name}}Reconstructed {{$.Type}}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			buf := bytes.NewBuffer(buf.Bytes())
			_, _ = {{- $.Name}}Reconstructed.ReadFrom(buf)
		}
	})
	{
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteTo(&buf)
	}

	// ---------------------------------------------------------------------------------------------
	// {{$.Type}} binary serialization (uncompressed)
	b.Run("{{$.Name}}: binary raw serialization ({{$.Type}})", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			var buf bytes.Buffer
			_, _ = {{- $.Name}}.WriteRawTo(&buf)
		}
	})
	b.Run("{{$.Name}}: binary raw deserialization ({{$.Type}})", func(b *testing.B) {
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteRawTo(&buf)
		var {{ $.Name}}Reconstructed {{$.Type}}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			buf := bytes.NewBuffer(buf.Bytes())
			_, _ = {{- $.Name}}Reconstructed.ReadFrom(buf)
		}
	})
	{
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteRawTo(&buf)
	}

	// ---------------------------------------------------------------------------------------------
	// {{$.Type}} binary serialization (cbor)
	b.Run("{{$.Name}}: binary cbor serialization ({{$.Type}})", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			var buf bytes.Buffer
			enc := cbor.NewEncoder(&buf)
			enc.Encode(&{{- $.Name}})
		}
	})
	b.Run("{{$.Name}}: binary cbor deserialization ({{$.Type}})", func(b *testing.B) {
		var buf bytes.Buffer
		enc := cbor.NewEncoder(&buf)
		enc.Encode(&{{- $.Name}})
		var {{ $.Name}}Reconstructed {{$.Type}}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			buf := bytes.NewBuffer(buf.Bytes())
			dec := cbor.NewDecoder(buf)
			dec.Decode(&{{- $.Name}}Reconstructed)
		}
	})
	{
		var buf bytes.Buffer
		enc := cbor.NewEncoder(&buf)
		enc.Encode(&{{- $.Name}})
	}

{{ end }}

